{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Chroma Go Client","text":"<p>An experimental Go client for ChromaDB.</p>"},{"location":"#installation","title":"Installation","text":"<p>Add the library to your project:</p> <pre><code>go get github.com/amikos-tech/chroma-go\n</code></pre>"},{"location":"#getting-started","title":"Getting Started","text":"<p>Concepts:</p> <ul> <li>Client Options - How to configure chroma go client</li> <li>Embeddings - List of available embedding functions and how to use them</li> <li>Records - How to work with records</li> <li>Filtering - How to filter results</li> </ul> <p>Import the library:</p> <pre><code>package main\n\nimport (\n    chroma \"github.com/amikos-tech/chroma-go\"\n    \"github.com/amikos-tech/chroma-go/collection\"\n    openai \"github.com/amikos-tech/chroma-go/openai\"\n    \"github.com/amikos-tech/chroma-go/types\"\n)\n</code></pre> <p>New client:</p> <p>Note</p> <p>Check Client Options for more details.</p> <pre><code>package main\n\nimport (\n    chroma \"github.com/amikos-tech/chroma-go\"\n    \"fmt\"\n)\n\nfunc main() {\n    client,err := chroma.NewClient(\"localhost:8000\")\n    if err != nil {\n        fmt.Printf(\"Failed to create client: %v\", err)\n    }\n    // do something with client\n}\n</code></pre>"},{"location":"#embedding-functions","title":"Embedding Functions","text":"<p>The client supports a number of embedding wrapper functions. See Embeddings for more details.</p>"},{"location":"#crud-operations","title":"CRUD Operations","text":"<p>Ensure you have a running instance of Chroma running. See this doc for more info how to run local Chroma instance.</p> <p>Here's a simple example of creating a new collection:</p> <pre><code>package main\n\nimport (\n    \"context\"\n    \"fmt\"\n    \"log\"\n    \"os\"\n\n    chroma \"github.com/amikos-tech/chroma-go\"\n    \"github.com/amikos-tech/chroma-go/openai\"\n    \"github.com/amikos-tech/chroma-go/types\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    client := chroma.NewClient(\"localhost:8000\")\n\n    openaiEf, err := openai.NewOpenAIEmbeddingFunction(os.Getenv(\"OPENAI_API_KEY\"))\n    if err != nil {\n        log.Fatalf(\"Error creating OpenAI embedding function: %s \\n\", err)\n    }\n\n    // Create a new collection with OpenAI embedding function, L2 distance function and metadata\n    _, err = client.CreateCollection(ctx, \"my-collection\", map[string]interface{}{\"key1\": \"value1\"}, true, openaiEf, types.L2)\n    if err != nil {\n        log.Fatalf(\"Failed to create collection: %v\", err)\n    }\n\n    // Get collection\n    collection, err := client.GetCollection(ctx, \"my-collection\", openaiEf)\n    if err != nil {\n        log.Fatalf(\"Failed to get collection: %v\", err)\n    }\n\n    // Modify collection\n    _, err = collection.Update(ctx, \"new-collection\",nil)\n    if err != nil {\n        log.Fatalf(\"Failed to update collection: %v\", err)\n    }\n\n    // Delete collection\n    _, err = client.DeleteCollection(ctx, \"new-collection\")\n    if err != nil {\n        log.Fatalf(\"Failed to delete collection: %v\", err)\n    }\n}\n</code></pre>"},{"location":"#add-documents","title":"Add documents","text":"<p>Here's a simple example of adding documents to a collection:</p> <pre><code>package main\n\nimport (\n    \"context\"\n    \"fmt\"\n    \"log\"\n    \"os\"\n\n    chroma \"github.com/amikos-tech/chroma-go\"\n    \"github.com/amikos-tech/chroma-go/openai\"\n    \"github.com/amikos-tech/chroma-go/types\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    client := chroma.NewClient(\"localhost:8000\")\n\n    openaiEf, err := openai.NewOpenAIEmbeddingFunction(os.Getenv(\"OPENAI_API_KEY\"))\n    if err != nil {\n        log.Fatalf(\"Error creating OpenAI embedding function: %s \\n\", err)\n    }\n    // Get the collection we created earlier\n    collection, err := client.GetCollection(ctx, \"my-collection\", openaiEf)\n    if err != nil {\n        log.Fatalf(\"Failed to create collection: %v\", err)\n        return\n    }\n    _, err = collection.Add(context.TODO(), nil, []map[string]interface{}{{\"key1\": \"value1\"}}, []string{\"My name is John and I have three dogs.\"}, []string{\"ID1\"})\n    if err != nil {\n        log.Fatalf(\"Error adding documents: %v\\n\", err)\n        return\n    }\n    data, err := collection.Get(context.TODO(), nil, nil, nil, nil)\n    if err != nil {\n        log.Fatalf(\"Error getting documents: %v\\n\", err)\n        return\n    }\n    // see GetResults struct for more details\n    fmt.Printf(\"Collection data: %v\\n\", data)\n}\n</code></pre>"},{"location":"#query-collection","title":"Query Collection","text":"<p>Here's a simple example of querying documents in a collection:</p> <pre><code>package main\n\nimport (\n    \"context\"\n    \"fmt\"\n    \"log\"\n    \"os\"\n\n    chroma \"github.com/amikos-tech/chroma-go\"\n    \"github.com/amikos-tech/chroma-go/openai\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    client := chroma.NewClient(\"localhost:8000\")\n\n    openaiEf, err := openai.NewOpenAIEmbeddingFunction(os.Getenv(\"OPENAI_API_KEY\"))\n    if err != nil {\n        log.Fatalf(\"Error creating OpenAI embedding function: %s \\n\", err)\n    }\n    // Get the collection we created earlier\n    collection, err := client.GetCollection(ctx, \"my-collection\", openaiEf)\n    if err != nil {\n        log.Fatalf(\"Failed to create collection: %v\", err)\n        return\n    }\n    data, err := collection.Query(context.TODO(), []string{\"I love dogs\"}, 5, nil, nil, nil)\n    if err != nil {\n        log.Fatalf(\"Error querying documents: %v\\n\", err)\n        return\n    }\n    // see QueryResults struct for more details\n    fmt.Printf(\"Collection data: %v\\n\", data)\n}\n</code></pre>"},{"location":"#delete-documents","title":"Delete Documents","text":"<p>Here's a simple example of deleting documents from a collection:</p> <pre><code>package main\n\nimport (\n    \"context\"\n    \"fmt\"\n    \"log\"\n    \"os\"\n\n    chroma \"github.com/amikos-tech/chroma-go\"\n    \"github.com/amikos-tech/chroma-go/openai\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    client := chroma.NewClient(\"localhost:8000\")\n\n    openaiEf, err := openai.NewOpenAIEmbeddingFunction(os.Getenv(\"OPENAI_API_KEY\"))\n    if err != nil {\n        log.Fatalf(\"Error creating OpenAI embedding function: %s \\n\", err)\n    }\n    // Get the collection we created earlier\n    collection, err := client.GetCollection(ctx, \"my-collection\", openaiEf)\n    if err != nil {\n        log.Fatalf(\"Failed to create collection: %v\", err)\n        return\n    }\n    _, err = collection.Delete(context.TODO(), []string{\"ID1\"}, nil, nil)\n    if err != nil {\n        log.Fatalf(\"Error deleting documents: %v\\n\", err)\n        return\n    }\n    fmt.Printf(\"Documents deleted\\n\")\n}\n</code></pre>"},{"location":"auth/","title":"Authentication","text":"<p>There are four ways to authenticate with Chroma:</p> <ul> <li>Manual Header authentication - this approach requires you to be familiar with the server-side auth and generate and insert the necessary headers manually.</li> <li>Chroma Basic Auth mechanism</li> <li>Chroma Token Auth mechanism with Bearer Authorization header</li> <li>Chroma Token Auth mechanism with X-Chroma-Token header</li> </ul>"},{"location":"auth/#manual-header-authentication","title":"Manual Header Authentication","text":"<pre><code>package main\n\nimport (\n    \"context\"\n    \"log\"\n    chroma \"github.com/amikos-tech/chroma-go\"\n)\n\nfunc main() {\n    var defaultHeaders = map[string]string{\"Authorization\": \"Bearer my-custom-token\"}\n    clientWithTenant, err := chroma.NewClient(\"http://api.trychroma.com/v1/\", chroma.WithDefaultHeaders(defaultHeaders))\n    if err != nil {\n        log.Fatalf(\"Error creating client: %s \\n\", err)\n    }\n    _, err = clientWithTenant.Heartbeat(context.TODO())\n    if err != nil {\n        log.Fatalf(\"Error calling heartbeat: %s \\n\", err)\n    }\n}\n</code></pre>"},{"location":"auth/#chroma-basic-auth-mechanism","title":"Chroma Basic Auth mechanism","text":"<pre><code>package main\n\nimport (\n    \"context\"\n    \"log\"\n    chroma \"github.com/amikos-tech/chroma-go\"\n    \"github.com/amikos-tech/chroma-go/types\"\n)\n\nfunc main() {\n    client, err := chroma.NewClient(\"http://api.trychroma.com/v1/\", chroma.WithAuth(types.NewBasicAuthCredentialsProvider(\"myUser\", \"myPassword\")))\n    if err != nil {\n        log.Fatalf(\"Error creating client: %s \\n\", err)\n    }\n    _, err = client.Heartbeat(context.TODO())\n    if err != nil {\n        log.Fatalf(\"Error calling heartbeat: %s \\n\", err)\n    }\n}\n</code></pre>"},{"location":"auth/#chroma-token-auth-mechanism-with-bearer-authorization-header","title":"Chroma Token Auth mechanism with Bearer Authorization header","text":"<pre><code>package main\n\nimport (\n    \"context\"\n    \"log\"\n    chroma \"github.com/amikos-tech/chroma-go\"\n    \"github.com/amikos-tech/chroma-go/types\"\n)\n\nfunc main() {\n    client, err := chroma.NewClient(\"http://api.trychroma.com/v1/\", chroma.WithAuth(types.NewTokenAuthCredentialsProvider(\"my-auth-token\", types.AuthorizationTokenHeader)))\n    if err != nil {\n        log.Fatalf(\"Error creating client: %s \\n\", err)\n    }\n    _, err = client.Heartbeat(context.TODO())\n    if err != nil {\n        log.Fatalf(\"Error calling heartbeat: %s \\n\", err)\n    }\n}\n</code></pre>"},{"location":"auth/#chroma-token-auth-mechanism-with-x-chroma-token-header","title":"Chroma Token Auth mechanism with X-Chroma-Token header","text":"<pre><code>package main\n\nimport (\n    \"context\"\n    \"log\"\n    chroma \"github.com/amikos-tech/chroma-go\"\n    \"github.com/amikos-tech/chroma-go/types\"\n)\n\nfunc main() {\n    client, err := chroma.NewClient(\"http://api.trychroma.com/v1/\", chroma.WithAuth(types.NewTokenAuthCredentialsProvider(\"my-auth-token\", types.XChromaTokenHeader)))\n    if err != nil {\n        log.Fatalf(\"Error creating client: %s \\n\", err)\n    }\n    _, err = client.Heartbeat(context.TODO())\n    if err != nil {\n        log.Fatalf(\"Error calling heartbeat: %s \\n\", err)\n    }\n}\n</code></pre>"},{"location":"client/","title":"Chroma Client","text":"<p>Options:</p> Options Usage Description Value Required basePath passed as arg to NewClient The Chroma server base API. valid URL Yes Tenant WithTenant(\"tenant\") as ClientOption to the NewClient The default tenant to use. string No (default: <code>default_tenant</code>) Database WithDatabase(\"database\") as ClientOption to the NewClient The default database to use. string No (default: <code>default_database</code>) Debug WithDebug(true/false) as ClientOption to the NewClient Enable debug mode. bool No (default: <code>false</code>) Default Headers WithDefaultHeaders(map[string]string) as ClientOption to the NewClient Set default headers for the client. map[string]string No (default: <code>nil</code>) <p>Tenant and Database</p> <p>The tenant and database are only supported for Chroma API version <code>0.4.15+</code>.</p> <p>Creating a new client:</p> <pre><code>package main\n\nimport (\n    \"context\"\n    \"fmt\"\n    \"log\"\n    \"os\"\n\n    chroma \"github.com/amikos-tech/chroma-go\"\n)\n\nfunc main() {\n    client, err := chroma.NewClient(\n        \"http://localhost:8000\", \n        chroma.WithTenant(\"my_tenant\"), \n        chroma.WithDatabase(\"my_db\"), \n        chroma.WithDebug(true), \n        chroma.WithDefaultHeaders(map[string]string{\"Authorization\": \"Bearer my token\"}),\n        )\n    if err != nil {\n        fmt.Printf(\"Failed to create client: %v\", err)\n    }\n    // do something with client\n}\n</code></pre>"},{"location":"embeddings/","title":"Embeddings","text":"<p>The following embedding wrappers are available:</p> Embedding Model Description OpenAI OpenAI embeddings API.All models are supported - see OpenAI docs for more info. Cohere Cohere embeddings API.All models are supported - see Cohere API docs for more info. HuggingFace Inference API HuggingFace Inference API.All models supported by the API."},{"location":"embeddings/#openai","title":"OpenAI","text":"<pre><code>package main\n\nimport (\n    \"context\"\n    \"fmt\"\n    \"os\"\n\n    openai \"github.com/amikos-tech/chroma-go/openai\"\n)\n\nfunc main() {\n    ef, efErr := openai.NewOpenAIEmbeddingFunction(os.Getenv(\"OPENAI_API_KEY\"), openai.WithModel(openai.TextEmbedding3Large))\n    if efErr != nil {\n        fmt.Printf(\"Error creating OpenAI embedding function: %s \\n\", efErr)\n    }\n    documents := []string{\n        \"Document 1 content here\",\n    }\n    resp, reqErr := ef.EmbedDocuments(context.Background(), documents)\n    if reqErr != nil {\n        fmt.Printf(\"Error embedding documents: %s \\n\", reqErr)\n    }\n    fmt.Printf(\"Embedding response: %v \\n\", resp)\n}\n</code></pre>"},{"location":"embeddings/#cohere","title":"Cohere","text":"<pre><code>package main\n\nimport (\n    \"context\"\n    \"fmt\"\n    \"os\"\n\n    cohere \"github.com/amikos-tech/chroma-go/cohere\"\n)\n\nfunc main() {\n    ef := cohere.NewCohereEmbeddingFunction(os.Getenv(\"COHERE_API_KEY\"))\n    documents := []string{\n        \"Document 1 content here\",\n    }\n    resp, reqErr := ef.EmbedDocuments(context.Background(), documents)\n    if reqErr != nil {\n        fmt.Printf(\"Error embedding documents: %s \\n\", reqErr)\n    }\n    fmt.Printf(\"Embedding response: %v \\n\", resp)\n}\n</code></pre>"},{"location":"embeddings/#huggingface-inference-api","title":"HuggingFace Inference API","text":"<pre><code>package main\n\nimport (\n    \"context\"\n    \"fmt\"\n    \"os\"\n\n    huggingface \"github.com/amikos-tech/chroma-go/hf\"\n)\n\nfunc main() {\n    ef := huggingface.NewHuggingFaceEmbeddingFunction(os.Getenv(\"HUGGINGFACE_API_KEY\"),\"sentence-transformers/all-MiniLM-L6-v2\")\n    documents := []string{\n        \"Document 1 content here\",\n    }\n    resp, reqErr := ef.EmbedDocuments(context.Background(), documents)\n    if reqErr != nil {\n        fmt.Printf(\"Error embedding documents: %s \\n\", reqErr)\n    }\n    fmt.Printf(\"Embedding response: %v \\n\", resp)\n}\n</code></pre>"},{"location":"filtering/","title":"Filtering","text":"<p>Chroma offers two types of filters:</p> <ul> <li>Metadata - filtering based on metadata attribute values</li> <li>Documents - filtering based on document content (contains or not contains)</li> </ul>"},{"location":"filtering/#metadata","title":"Metadata","text":"<ul> <li>TODO - Add builder example</li> <li>TODO - Describe all available operations</li> </ul> <pre><code>package main\n\nimport (\n    \"context\"\n    \"fmt\"\n    \"github.com/amikos-tech/chroma-go\"\n    \"github.com/amikos-tech/chroma-go/openai\"\n    \"github.com/amikos-tech/chroma-go/types\"\n    \"github.com/amikos-tech/chroma-go/where\"\n)\n\nfunc main() {\n    embeddingF, err := openai.NewOpenAIEmbeddingFunction(\"sk-xxxx\")\n    if err != nil {\n        fmt.Println(err)\n        return\n    }\n    client, err := chroma.NewClient(\"http://localhost:8000\")\n    if err != nil {\n        fmt.Println(err)\n        return\n    }\n    collection, err := client.GetCollection(context.TODO(), \"my-collection\", embeddingF)\n    if err != nil {\n        fmt.Println(err)\n        return\n    }\n    // Filter by metadata\n\n    result, err := collection.GetWithOptions(\n        context.Background(),\n        types.WithWhere(\n            where.Or(\n                where.Eq(\"category\", \"Chroma\"),\n                where.Eq(\"type\", \"vector database\"),\n            ),\n        ),\n    )\n    if err != nil {\n        fmt.Println(err)\n        return\n    }\n    // do something with result\n    fmt.Println(result)\n}\n</code></pre>"},{"location":"filtering/#document","title":"Document","text":"<ul> <li>TODO - Add builder example</li> <li>TODO - Describe all available operations</li> </ul> <pre><code>package main\n\nimport (\n    \"context\"\n    \"fmt\"\n    \"github.com/amikos-tech/chroma-go\"\n    \"github.com/amikos-tech/chroma-go/openai\"\n    \"github.com/amikos-tech/chroma-go/types\"\n    \"github.com/amikos-tech/chroma-go/where_document\"\n)\n\nfunc main() {\n    embeddingF, err := openai.NewOpenAIEmbeddingFunction(\"sk-xxxx\")\n    if err != nil {\n        fmt.Println(err)\n        return\n    }\n    client, err := chroma.NewClient(\"http://localhost:8000\")\n    if err != nil {\n        fmt.Println(err)\n        return\n    }\n    collection, err := client.GetCollection(context.TODO(), \"my-collection\", embeddingF)\n    if err != nil {\n        fmt.Println(err)\n        return\n    }\n    // Filter by metadata\n\n    result, err := collection.GetWithOptions(\n        context.Background(),\n        types.WithWhereDocument(\n            wheredoc.Or(\n                wheredoc.Contains(\"Vector database\"),\n                wheredoc.Contains(\"Chroma\"),\n            ),\n        ),\n    )\n\n    if err != nil {\n        fmt.Println(err)\n        return\n    }\n    // do something with result\n    fmt.Println(result)\n}\n</code></pre>"},{"location":"records/","title":"Records","text":"<p>Records are a mechanism that allows you to manage Chroma documents as a cohesive unit. This has several advantages over the traditional approach of managing documents, ids, embeddings, and metadata separately.</p> <p>Two concepts are important to keep in mind here:</p> <ul> <li>Record - corresponds to a single document in Chroma which includes id, embedding, metadata, the document or URI</li> <li>RecordSet - a single unit of work to insert, upsert, update or delete records.</li> </ul>"},{"location":"records/#record","title":"Record","text":"<p>A Record contains the following fields:</p> <ul> <li>ID (string)</li> <li>Document (string) - optional</li> <li>Metadata (map[string]interface{}) - optional</li> <li>Embedding ([]float32 or []int32, wrapped in Embedding struct)</li> <li>URI (string) - optional</li> </ul> <p>Here's the <code>Record</code> type:</p> <pre><code>package types\n\ntype Record struct {\n    ID        string\n    Embedding Embedding\n    Metadata  map[string]interface{}\n    Document  string\n    URI       string\n    err       error // indicating whether the record is valid\n}\n</code></pre>"},{"location":"records/#recordset","title":"RecordSet","text":"<p>A record set is a cohesive unit of work, allowing the user to add, upsert, update, or delete records.</p> <p>Operation support</p> <p>Currently the record set only supports add operation</p> <pre><code>rs, rerr := types.NewRecordSet(\n            types.WithEmbeddingFunction(types.NewConsistentHashEmbeddingFunction()),\n            types.WithIDGenerator(types.NewULIDGenerator()),\n        )\nif err != nil {\n    log.Fatalf(\"Error creating record set: %s\", err)\n}\n// you can loop here to add multiple records\nrs.WithRecord(types.WithDocument(\"Document 1 content\"), types.WithMetadata(\"key1\", \"value1\"))\nrs.WithRecord(types.WithDocument(\"Document 2 content\"), types.WithMetadata(\"key2\", \"value2\"))\nrecords, err = rs.BuildAndValidate(context.Background())\n</code></pre>"}]}