/*
ChromaDB API

This is OpenAPI schema for ChromaDB API.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// MetadatasInnerValue struct for MetadatasInnerValue
type MetadatasInnerValue struct {
	Bool    *bool
	Float32 *float32
	Int32   *int32
	String  *string
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *MetadatasInnerValue) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into Bool
	err = json.Unmarshal(data, &dst.Bool)
	if err == nil {
		jsonBool, _ := json.Marshal(dst.Bool)
		if string(jsonBool) == "{}" { // empty struct
			dst.Bool = nil
		} else {
			return nil // data stored in dst.Bool, return on the first match
		}
	} else {
		dst.Bool = nil
	}

	// try to unmarshal JSON data into Float32
	err = json.Unmarshal(data, &dst.Float32)
	if err == nil {
		jsonFloat32, _ := json.Marshal(dst.Float32)
		if string(jsonFloat32) == "{}" { // empty struct
			dst.Float32 = nil
		} else {
			return nil // data stored in dst.Float32, return on the first match
		}
	} else {
		dst.Float32 = nil
	}

	// try to unmarshal JSON data into Int32
	err = json.Unmarshal(data, &dst.Int32)
	if err == nil {
		jsonInt32, _ := json.Marshal(dst.Int32)
		if string(jsonInt32) == "{}" { // empty struct
			dst.Int32 = nil
		} else {
			return nil // data stored in dst.Int32, return on the first match
		}
	} else {
		dst.Int32 = nil
	}

	// try to unmarshal JSON data into String
	err = json.Unmarshal(data, &dst.String)
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			return nil // data stored in dst.String, return on the first match
		}
	} else {
		dst.String = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(MetadatasInnerValue)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *MetadatasInnerValue) MarshalJSON() ([]byte, error) {
	if src.Bool != nil {
		return json.Marshal(&src.Bool)
	}

	if src.Float32 != nil {
		return json.Marshal(&src.Float32)
	}

	if src.Int32 != nil {
		return json.Marshal(&src.Int32)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in anyOf schemas
}

type NullableMetadatasInnerValue struct {
	value *MetadatasInnerValue
	isSet bool
}

func (v NullableMetadatasInnerValue) Get() *MetadatasInnerValue {
	return v.value
}

func (v *NullableMetadatasInnerValue) Set(val *MetadatasInnerValue) {
	v.value = val
	v.isSet = true
}

func (v NullableMetadatasInnerValue) IsSet() bool {
	return v.isSet
}

func (v *NullableMetadatasInnerValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetadatasInnerValue(val *MetadatasInnerValue) *NullableMetadatasInnerValue {
	return &NullableMetadatasInnerValue{value: val, isSet: true}
}

func (v NullableMetadatasInnerValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetadatasInnerValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
